import time 
import asyncio
from ollama import AsyncClient


async def chat():
  message = {'role': 'user', 'content': "Please provide a cumulative score out of 100 for this C++ program. Do NOT breakdown the score or say anything. Just a number out of 100. Thats it. Your response should be this in this format: 35/100.Please do what I say.Code: //courseid:9017881 //studentid:111404089 //assignmentid:44952891 #include <iostream> #include <vector>  using namespace std;  // Function to print the tic-tac-toe board void printBoard(const vector<vector<char>>& board) {     cout <<   1 2 3n;     for (int i = 0; i < 3; ++i) {         cout << i + 1 <<  ;         for (int j = 0; j < 3; ++j) {             cout << board[i][j] <<  ;         }         cout << endl;     } }  // Function to check if there is a winner char checkWinner(const vector<vector<char>>& board) {     // Check rows and columns     for (int i = 0; i < 3; ++i) {         if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] !=  )             return board[i][0];         if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] !=  )             return board[0][i];     }     // Check diagonals     if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] !=  )         return board[0][0];     if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] !=  )         return board[0][2];     return  ; // No winner yet }  int main() {     vector<vector<char>> board(3, vector<char>(3,  )); // Initialize empty board     int row, col;     char currentPlayer = X;     bool gameFinished = false;      cout << Welcome to Tic-Tac-Toe!n;     cout << Player 1: X, Player 2: On;      while (!gameFinished) {         printBoard(board);         cout << Player  << currentPlayer << , enter your move (row column): ;         cin >> row >> col;          if (row < 1 || row > 3 || col < 1 || col > 3 || board[row - 1][col - 1] !=  ) {             cout << Invalid move. Try again.n;             continue;         }          board[row - 1][col - 1] = currentPlayer;         char winner = checkWinner(board);         if (winner !=  ) {             printBoard(board);             cout << Player  << winner <<  wins!n;             gameFinished = true;         } else if (board[0][0] !=   && board[0][1] !=   && board[0][2] !=   &&                    board[1][0] !=   && board[1][1] !=   && board[1][2] !=   &&                    board[2][0] !=   && board[2][1] !=   && board[2][2] !=  ) {             printBoard(board);             cout << Its a draw!n;             gameFinished = true;         } else {             currentPlayer = (currentPlayer == X) ? O : X;         }     }      return 0; } Criteria: Grading Criteria: nnGood variable/constant namesnn[-2] Some hard coding of values that should be constantsn[-2] Some variables named in all uppercase (as if they are constants)n[-3] Do not declare variables inside a loopn[-3] No constants used as requiredn[-2] Use constants wherever possiblen[-2] Constants should be named in all UPPERCASEn[-1] Bool variables should only contain true or falsen[-3] no global variablesnnProper indenting and spacingnn[-3] Indentation inconsistentn[-1] Some {} incorrectn[-2] Missing spaces around operatorsn[-2] line(s) not less than 80 charsn[-2] do not declare unnamed blocksn[-2] Declare the variables before printing welcome messagennProper documentationnn[-10] Missing all required documentationn[-8] Documentation not done as requiredn[-3] Documentation incompleten[-2] Please put your name in documentationn[-2] Do not use C header filesnnWelcome messagenn[-2] Missing blank lines prior to messagen[-1] Welcome message stops with no instructionsn[-10] No welcome message explaining the gamen[-5] Welcome message appears after agreeing to play gamen[-5] Welcome message does not explain gamen[-2] Do not repeat welcome message when repeating gamennnPrompt(s) for input properly displayed and easy to understandnn[-2] Leave cursor on same line as prompt for inputn[-1] Check spacing on promptnnnRandom number properly constrainednnnnGame is played correctlynn[-5] Same number for each gamen[-10] User gets only one guessn[-5] Game does not repeatnnProper choice of repeition and decision statements and these are well-designednn[-2] Extra if statement when number guessedn[-2] Goodbye message is inside game-play loopn[-3] if/else is correct choice for too high/lown[-2] while loop condition for choosing to play game needs to allow both upper and lower casen[-2] Variable(s) declared inside loopn[-4] Correct guess should exit loop (congrats message should be outside play loop)n[-1] Empty while loop at end of programn[-5] do..while loop incorrect choicennnnOutput neatly and clearly displayednn[-1] Please do not write in all CAPITAL letters (feels like the program is yelling at me)n[-5] User not told what number range isn[-2] Prompt does not remind user of number rangen[-1] Check spellingn[-5] Random number range not same as printed rangennnGoodbye mesagenn[-10] No goodbye messagen[-2] Missing blank lines after messagen[-2] Goodbye message should appear only when user exits programnnn"}
  response = await AsyncClient().chat(model='mistral', messages=[message])
  print(response['message']['content'])


start_time = time.time() 
asyncio.run(chat())
end_time = time.time() 
difference = print(f"Time Difference: {end_time - start_time}")