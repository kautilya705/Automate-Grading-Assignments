{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program that calculates the factorial of a number using recursion. int factorial(int n) { if (n <= 1) return 1; else return n * factorial(n - 1); }", "score": 95}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a C++ program to find the largest element in an array. #include <iostream> using namespace std; int main() { int arr[] = {1, 45, 54, 71, 76, 12}; int n = sizeof(arr)/sizeof(arr[0]); int max = arr[0]; for(int i = 1; i < n; i++) { if(arr[i] > max) max = arr[i]; } cout << \"The largest element is \" << max << endl; return 0; }", "score": 90}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Develop a simple calculator that performs basic operations like addition, subtraction, multiplication, and division. #include <iostream> using namespace std; int main() { char operation; float num1, num2; cout << \"Enter operator either + or - or * or /: \"; cin >> operation; cout << \"Enter two operands: \"; cin >> num1 >> num2; switch(operation) { case '+': cout << num1+num2; break; case '-': cout << num1-num2; break; case '*': cout << num1*num2; break; case '/': cout << num1/num2; break; default: cout << \"Error! operator is not correct\"; break; } return 0; }", "score": 92}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program that reads a string from the user and prints it in reverse. #include <iostream> #include <string> using namespace std; int main() { string str; cout << \"Enter a string: \"; getline(cin, str); for(int i = str.length()-1; i >= 0; i--) { cout << str[i]; } return 0; }", "score": 88}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program that checks whether a given number is prime or not. #include <iostream> using namespace std; bool isPrime(int n) { if (n <= 1) return false; for (int i = 2; i < n; i++) { if (n % i == 0) return false; } return true; } int main() { int num; cout << \"Enter a number: \"; cin >> num; if(isPrime(num)) cout << num << \" is a prime number.\"; else cout << num << \" is not a prime number.\"; return 0; }", "score": 93}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program that simulates a basic bank account system with functionalities to deposit, withdraw, and check balance. #include <iostream> using namespace std; class Account { private: double balance; public: Account() : balance(0) {} void deposit(double amt) { balance += amt; } void withdraw(double amt) { if(amt <= balance) balance -= amt; else cout << \"Insufficient balance\" << endl; } double getBalance() { return balance; } }; int main() { Account myAccount; myAccount.deposit(1000); myAccount.withdraw(500); cout << \"Current balance: $\" << myAccount.getBalance() << endl; return 0; }", "score": 94}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a function to merge two sorted arrays into a single sorted array. #include <iostream> #include <vector> using namespace std; vector<int> mergeSortedArrays(const vector<int>& a, const vector<int>& b) { vector<int> result; unsigned i = 0, j = 0; while(i < a.size() && j < b.size()) { if(a[i] < b[j]) { result.push_back(a[i++]); } else { result.push_back(b[j++]); } } while(i < a.size()) result.push_back(a[i++]); while(j < b.size()) result.push_back(b[j++]); return result; }", "score": 90}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program that creates a dynamic array and allows the user to input values, then prints the values. #include <iostream> using namespace std; int main() { int size; cout << \"Enter the size of the array: \"; cin >> size; int* myArray = new int[size]; for(int i = 0; i < size; i++) { cout << \"Enter element \" << i+1 << \": \"; cin >> myArray[i]; } cout << \"You entered: \"; for(int i = 0; i < size; i++) { cout << myArray[i] << \" \"; } delete[] myArray; return 0; }", "score": 87}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Develop a program that uses a class to model a simple Book with attributes for title, author, and number of pages. Include methods to set and get these attributes. #include <iostream> using namespace std; class Book { private: string title, author; int pages; public: Book(string t, string a, int p) : title(t), author(a), pages(p) {} void setDetails(string t, string a, int p) { title = t; author = a; pages = p; } string getTitle() { return title; } string getAuthor() { return author; } int getPages() { return pages; } };", "score": 91}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program that utilizes a map to count the frequency of words in a given string. #include <iostream> #include <map> #include <sstream> using namespace std; int main() { string str = \"hello world hello all\"; map<string, int> wordCount; stringstream ss(str); string word; while(ss >> word) { wordCount[word]++; } for(auto it : wordCount) { cout << it.first << \": \" << it.second << endl; } return 0; }", "score": 89}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a queue using two stacks. #include <stack> #include <iostream> using namespace std; class Queue { private: stack<int> s1, s2; public: void enqueue(int x) { s1.push(x); } int dequeue() { if(s2.empty()) { while(!s1.empty()) { s2.push(s1.top()); s1.pop(); } } if(!s2.empty()) { int x = s2.top(); s2.pop(); return x; } else { cout << \"Queue is empty\" << endl; return -1; } } };", "score": 85}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a function that calculates the greatest common divisor (GCD) of two numbers using recursion. int gcd(int a, int b) { if (b == 0) return a; else return gcd(b, a % b); }", "score": 94}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Design a class that represents a geometric shape, Circle, with a method to calculate its area. Include attributes for its radius. #include <iostream> using namespace std; class Circle { private: double radius; public: Circle(double r) : radius(r) {} double area() { return 3.14 * radius * radius; } };", "score": 92}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Develop a linked list class from scratch, including methods for adding, removing, and searching for elements. #include <iostream> using namespace std; class Node { public: int data; Node* next; Node(int d) : data(d), next(nullptr) {} }; class LinkedList { private: Node* head; public: LinkedList() : head(nullptr) {} void add(int data) { Node* newNode = new Node(data); if(head == nullptr) head = newNode; else { Node* temp = head; while(temp->next != nullptr) temp = temp->next; temp->next = newNode; } } void remove(int data) { if(head == nullptr) return; if(head->data == data) { Node* temp = head; head = head->next; delete temp; return; } Node* prev = nullptr; Node* temp = head; while(temp != nullptr && temp->data != data) { prev = temp; temp = temp->next; } if(temp == nullptr) return; prev->next = temp->next; delete temp; } Node* search(int data) { Node* temp = head; while(temp != nullptr) { if(temp->data == data) return temp; temp = temp->next; } return nullptr; } };", "score": 88}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program that finds the sum of all numbers from 1 to N using a loop. #include <iostream> using namespace std; int main() { int N, sum = 0; cout << \"Enter a number: \"; cin >> N; for(int i = 1; i <= N; i++) { sum += i; } cout << \"The sum is \" << sum << endl; return 0; }", "score": 87}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program that reads a file and counts the number of lines, words, and characters in it. #include <iostream> #include <fstream> #include <string> using namespace std; int main() { ifstream file(\"sample.txt\"); string line; int lines = 0, words = 0, characters = 0; while(getline(file, line)) { lines++; characters += line.length(); stringstream ss(line); string word; while(ss >> word) words++; } cout << \"Lines: \" << lines << \"\\nWords: \" << words << \"\\nCharacters: \" << characters << endl; return 0; }", "score": 93}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Design and implement a class that simulates a stopwatch, including start, stop, and duration methods. #include <iostream> #include <chrono> using namespace std; class Stopwatch { private: chrono::time_point<chrono::high_resolution_clock> start_time, end_time; bool running = false; public: void start() { if(!running) { start_time = chrono::high_resolution_clock::now(); running = true; } } void stop() { if(running) { end_time = chrono::high_resolution_clock::now(); running = false; } } double duration() { chrono::duration<double> elapsed = end_time - start_time; return elapsed.count(); } };", "score": 95}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program that simulates a simple text-based adventure game. #include <iostream> #include <string> using namespace std; int main() { string input; cout << \"You are in a dark room. There is a door to your left and right. Where do you go? Left or Right: \"; getline(cin, input); if(input == \"Left\" || input == \"left\") { cout << \"You find yourself in a library.\"; } else if(input == \"Right\" || input == \"right\") { cout << \"You enter a room with a strange orb.\"; } else { cout << \"You stand still, unsure of what to do next.\"; } return 0; }", "score": 90}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a class that manages a list of tasks, including methods to add, remove, and display tasks. #include <iostream> #include <vector> #include <string> using namespace std; class TaskManager { private: vector<string> tasks; public: void addTask(const string& task) { tasks.push_back(task); } void removeTask(int index) { if(index >= 0 && index < tasks.size()) tasks.erase(tasks.begin() + index); } void displayTasks() { for(int i = 0; i < tasks.size(); i++) { cout << i+1 << \". \" << tasks[i] << endl; } } };", "score": 91}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a function that converts a binary number to decimal. #include <iostream> #include <string> #include <cmath> using namespace std; int binaryToDecimal(string binary) { int decimal = 0; for(int i = 0; i < binary.length(); i++) { if(binary[i] == '1') { decimal += pow(2, binary.length()-i-1); } } return decimal; }", "score": 89}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Design a simple GUI application using any C++ GUI library that displays a button. When clicked, the button should display a message box saying 'Hello, World!'.", "score": 90}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a C++ program to calculate the factorial of a given number using recursion.","score":75}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program that calculates the factorial of a number using recursion. int factorial(int n) { if (n <= 1) return 1; else return n * factorial(n - 1); }", "score": 95}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to find the sum of all elements in an array. int sumArray(int arr[], int size) { int sum = 0; for (int i = 0; i < size; i++) sum += arr[i]; return sum; }", "score": 90}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to check if a given string is a palindrome. bool isPalindrome(string str) { int left = 0; int right = str.length() - 1; while (left < right) { if (str[left] != str[right]) return false; left++; right--; } return true; }", "score": 88}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a C++ program to count the number of words in a sentence. int countWords(string sentence) { int count = 0; stringstream ss(sentence); string word; while (ss >> word) count++; return count; }", "score": 92}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to calculate the area of a circle. double areaOfCircle(double radius) { return 3.14159 * radius * radius; }", "score": 96}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to find the maximum and minimum elements in an array. void findMinMax(int arr[], int size, int& max, int& min) { max = arr[0]; min = arr[0]; for (int i = 1; i < size; i++) { if (arr[i] > max) max = arr[i]; if (arr[i] < min) min = arr[i]; } }", "score": 94}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to sort an array using selection sort algorithm. void selectionSort(int arr[], int size) { for (int i = 0; i < size - 1; i++) { int minIndex = i; for (int j = i + 1; j < size; j++) { if (arr[j] < arr[minIndex]) minIndex = j; } swap(arr[i], arr[minIndex]); } }", "score": 87}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to calculate the power of a number using recursion. int power(int base, int exponent) { if (exponent == 0) return 1; else return base * power(base, exponent - 1); }", "score": 93}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the largest element in an array. int findLargest(int arr[], int size) { int largest = arr[0]; for (int i = 1; i < size; i++) { if (arr[i] > largest) largest = arr[i]; } return largest; }", "score": 91}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to reverse a string. void reverseString(string& str) { int left = 0; int right = str.length() - 1; while (left < right) { swap(str[left], str[right]); left++; right--; } }", "score": 89}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to find the factorial of a number iteratively. int factorial(int n) { int result = 1; for (int i = 2; i <= n; i++) result *= i; return result; }", "score": 94}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to check if a number is prime. bool isPrime(int num) { if (num <= 1) return false; for (int i = 2; i <= sqrt(num); i++) { if (num % i == 0) return false; } return true; }", "score": 90}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to concatenate two strings without using the built-in concatenation operator. string concatenateStrings(string str1, string str2) { return str1 + str2; }", "score": 88}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to perform matrix multiplication. void multiplyMatrices(int mat1[][MAX_SIZE], int mat2[][MAX_SIZE], int result[][MAX_SIZE], int rows1, int cols1, int rows2, int cols2) { for (int i = 0; i < rows1; i++) { for (int j = 0; j < cols2; j++) { result[i][j] = 0; for (int k = 0; k < cols1; k++) { result[i][j] += mat1[i][k] * mat2[k][j]; } } } }", "score": 95}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to check if two strings are anagrams of each other. bool areAnagrams(string str1, string str2) { if (str1.length() != str2.length()) return false; sort(str1.begin(), str1.end()); sort(str2.begin(), str2.end()); return str1 == str2; }", "score": 92}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to calculate the sum of digits of a number. int sumOfDigits(int num) { int sum = 0; while (num > 0) { sum += num % 10; num /= 10; } return sum; }", "score": 93}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to reverse an array. void reverseArray(int arr[], int size) { int start = 0; int end = size - 1; while (start < end) { swap(arr[start], arr[end]); start++; end--; } }", "score": 89}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to find the GCD (Greatest Common Divisor) of two numbers. int gcd(int a, int b) { if (b == 0) return a; else return gcd(b, a % b); }", "score": 94}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the roots of a quadratic equation. void quadraticRoots(double a, double b, double c) { double discriminant = b * b - 4 * a * c; if (discriminant > 0) { double root1 = (-b + sqrt(discriminant)) / (2 * a); double root2 = (-b - sqrt(discriminant)) / (2 * a); cout << \"Roots are real and different. Root 1 = \" << root1 << \" and Root 2 = \" << root2; } else if (discriminant == 0) { double root = -b / (2 * a); cout << \"Roots are real and same. Root = \" << root; } else { double realPart = -b / (2 * a); double imaginaryPart = sqrt(-discriminant) / (2 * a); cout << \"Roots are complex. Root 1 = \" << realPart << \" + \" << imaginaryPart << \"i and Root 2 = \" << realPart << \" - \" << imaginaryPart << \"i\"; } }", "score": 97}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to find the length of a string without using the built-in length() function. int stringLength(string str) { int length = 0; while (str[length] != '\\0') length++; return length; }", "score": 91}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to check if a number is Armstrong number or not. bool isArmstrong(int num) { int originalNum, remainder, result = 0, n = 0; originalNum = num; while (originalNum != 0) { originalNum /= 10; ++n; } originalNum = num; while (originalNum != 0) { remainder = originalNum % 10; result += pow(remainder, n); originalNum /= 10; } return result == num; }", "score": 93}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to find the frequency of each element in an array. void findFrequency(int arr[], int size) { unordered_map<int, int> frequencyMap; for (int i = 0; i < size; i++) frequencyMap[arr[i]]++; for (auto const& pair : frequencyMap) cout << \"Frequency of \" << pair.first << \" is \" << pair.second << endl; }", "score": 92}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the LCM (Least Common Multiple) of two numbers. int lcm(int a, int b) { return (a * b) / gcd(a, b); }", "score": 95}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to print the Fibonacci series up to n terms. void fibonacci(int n) { int first = 0, second = 1, next; for (int i = 0; i < n; i++) { cout << first << \" \"; next = first + second; first = second; second = next; } }", "score": 90}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to check if a number is positive, negative, or zero. void checkNumber(int num) { if (num > 0) cout << num << \" is positive.\"; else if (num < 0) cout << num << \" is negative.\"; else cout << num << \" is zero.\"; }", "score": 88}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to convert a decimal number to binary. void decimalToBinary(int num) { int binaryNum[32]; int i = 0; while (num > 0) { binaryNum[i] = num % 2; num = num / 2; i++; } for (int j = i - 1; j >= 0; j--) cout << binaryNum[j]; }", "score": 94}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the area of a rectangle. double areaOfRectangle(double length, double width) { return length * width; }", "score": 96}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to convert a binary number to decimal. int binaryToDecimal(long long n) { int decimalNumber = 0, i = 0, remainder; while (n != 0) { remainder = n % 10; n /= 10; decimalNumber += remainder * pow(2, i); ++i; } return decimalNumber; }", "score": 91}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the area of a triangle. double areaOfTriangle(double base, double height) { return 0.5 * base * height; }", "score": 97}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to find the sum of natural numbers up to n. int sumOfNaturalNumbers(int n) { return (n * (n + 1)) / 2; }", "score": 93}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the area of a square. double areaOfSquare(double side) { return side * side; }", "score": 95}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to check if a number is even or odd. void checkEvenOrOdd(int num) { if (num % 2 == 0) cout << num << \" is even.\"; else cout << num << \" is odd.\"; }", "score": 90}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the sum of all prime numbers up to n. int sumOfPrimes(int n) { int sum = 0; for (int i = 2; i <= n; i++) { bool isPrime = true; for (int j = 2; j * j <= i; j++) { if (i % j == 0) { isPrime = false; break; } } if (isPrime) sum += i; } return sum; }", "score": 94}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to calculate the average of N numbers. double averageOfNumbers(int arr[], int size) { int sum = 0; for (int i = 0; i < size; i++) sum += arr[i]; return static_cast<double>(sum) / size; }", "score": 92}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the area of a trapezoid. double areaOfTrapezoid(double base1, double base2, double height) { return 0.5 * (base1 + base2) * height; }", "score": 96}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to check if a year is a leap year or not. bool isLeapYear(int year) { return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0); }", "score": 93}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the area of a parallelogram. double areaOfParallelogram(double base, double height) { return base * height; }", "score": 97}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to find the median of an array of integers. double findMedian(int arr[], int size) { sort(arr, arr + size); if (size % 2 != 0) return arr[size / 2]; else return (arr[size / 2 - 1] + arr[size / 2]) / 2.0; }", "score": 93}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to implement a simple tic-tac-toe game. void displayBoard(char board[3][3]) { for (int i = 0; i < 3; i++) { for (int j = 0; j < 3; j++) cout << board[i][j] << \" \"; cout << endl; } }", "score": 88}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to find the sum of natural numbers up to a given number n. int sumOfNaturalNumbers(int n) { return n * (n + 1) / 2; }", "score": 95}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to find the LCM (Least Common Multiple) of two numbers. int lcm(int a, int b) { return (a * b) / gcd(a, b); }", "score": 92}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the Fibonacci sequence up to a given number n. void fibonacci(int n) { int a = 0, b = 1, c; cout << \"Fibonacci Sequence up to \" << n << \": \"; cout << a << \" \" << b << \" \"; for (int i = 2; i < n; i++) { c = a + b; cout << c << \" \"; a = b; b = c; } }", "score": 94}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to find the area of a triangle given its three sides. double areaOfTriangle(double a, double b, double c) { double s = (a + b + c) / 2; return sqrt(s * (s - a) * (s - b) * (s - c)); }", "score": 91}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to find the sum of all prime numbers up to a given number n. int sumOfPrimes(int n) { int sum = 0; for (int i = 2; i <= n; i++) { bool isPrime = true; for (int j = 2; j <= sqrt(i); j++) { if (i % j == 0) { isPrime = false; break; } } if (isPrime) sum += i; } return sum; }", "score": 90}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the area and perimeter of a rectangle given its length and width. void calculateRectangle(double length, double width, double& area, double& perimeter) { area = length * width; perimeter = 2 * (length + width); }", "score": 96}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to perform binary search on a sorted array. int binarySearch(int arr[], int size, int key) { int left = 0, right = size - 1; while (left <= right) { int mid = left + (right - left) / 2; if (arr[mid] == key) return mid; if (arr[mid] < key) left = mid + 1; else right = mid - 1; } return -1; }", "score": 93}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to find the area and circumference of a circle given its radius. void circleProperties(double radius, double& area, double& circumference) { area = 3.14159 * radius * radius; circumference = 2 * 3.14159 * radius; }", "score": 95}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the nth Fibonacci number using recursion. int fibonacci(int n) { if (n <= 1) return n; return fibonacci(n - 1) + fibonacci(n - 2); }", "score": 90}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to convert a binary number to decimal. int binaryToDecimal(string binary) { int decimal = 0; int base = 1; for (int i = binary.length() - 1; i >= 0; i--) { if (binary[i] == '1') decimal += base; base *= 2; } return decimal; }", "score": 94}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to find the sum of digits of a number using recursion. int sumOfDigits(int num) { if (num == 0) return 0; return num % 10 + sumOfDigits(num / 10); }", "score": 92}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to perform matrix addition. void matrixAddition(int mat1[][MAX_SIZE], int mat2[][MAX_SIZE], int result[][MAX_SIZE], int rows, int cols) { for (int i = 0; i < rows; i++) { for (int j = 0; j < cols; j++) { result[i][j] = mat1[i][j] + mat2[i][j]; } } }", "score": 96}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to find the factorial of a number without using recursion. int factorial(int n) { int result = 1; for (int i = 2; i <= n; i++) result *= i; return result; }", "score": 93}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to find the roots of a quadratic equation using the quadratic formula. void quadraticRoots(double a, double b, double c) { double discriminant = b * b - 4 * a * c; if (discriminant > 0) { double root1 = (-b + sqrt(discriminant)) / (2 * a); double root2 = (-b - sqrt(discriminant)) / (2 * a); cout << \"Roots are real and different. Root 1 = \" << root1 << \" and Root 2 = \" << root2; } else if (discriminant == 0) { double root = -b / (2 * a); cout << \"Roots are real and same. Root = \" << root; } else { double realPart = -b / (2 * a); double imaginaryPart = sqrt(-discriminant) / (2 * a); cout << \"Roots are complex. Root 1 = \" << realPart << \" + \" << imaginaryPart << \"i and Root 2 = \" << realPart << \" - \" << imaginaryPart << \"i\"; } }", "score": 97}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to find the sum of all even numbers up to a given number n. int sumOfEvenNumbers(int n) { int sum = 0; for (int i = 2; i <= n; i += 2) sum += i; return sum; }", "score": 91}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to perform insertion sort on an array. void insertionSort(int arr[], int size) { for (int i = 1; i < size; i++) { int key = arr[i]; int j = i - 1; while (j >= 0 && arr[j] > key) { arr[j + 1] = arr[j]; j--; } arr[j + 1] = key; } }", "score": 95}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to find the sum of digits of a number using iteration. int sumOfDigits(int num) { int sum = 0; while (num != 0) { sum += num % 10; num /= 10; } return sum; }", "score": 92}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to perform bubble sort on an array. void bubbleSort(int arr[], int size) { for (int i = 0; i < size - 1; i++) { for (int j = 0; j < size - i - 1; j++) { if (arr[j] > arr[j + 1]) swap(arr[j], arr[j + 1]); } } }", "score": 94}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to check if a number is Armstrong number or not. bool isArmstrong(int num) { int originalNum, remainder, result = 0, n = 0; originalNum = num; while (originalNum != 0) { originalNum /= 10; ++n; } originalNum = num; while (originalNum != 0) { remainder = originalNum % 10; result += pow(remainder, n); originalNum /= 10; } if (result == num) return true; else return false; }", "score": 96}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to check if a given string is an integer or not. bool isInteger(const string& str) { if (str.empty()) return false; for (char c : str) { if (!isdigit(c)) return false; } return true; }", "score": 92}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to count the number of vowels and consonants in a string. void countVowelsConsonants(string str) { int vowels = 0, consonants = 0; for (char ch : str) { if (isalpha(ch)) { if (tolower(ch) == 'a' || tolower(ch) == 'e' || tolower(ch) == 'i' || tolower(ch) == 'o' || tolower(ch) == 'u') vowels++; else consonants++; } } cout << \"Vowels: \" << vowels << endl; cout << \"Consonants: \" << consonants << endl; }", "score": 94}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the area and perimeter of a square given its side length. void squareProperties(double sideLength, double& area, double& perimeter) { area = sideLength * sideLength; perimeter = 4 * sideLength; }", "score": 95}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to find the sum of elements in a 2D array. int sumOf2DArray(int arr[][MAX_COLS], int rows, int cols) { int sum = 0; for (int i = 0; i < rows; i++) { for (int j = 0; j < cols; j++) { sum += arr[i][j]; } } return sum; }", "score": 93}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to find the area of a trapezoid given its bases and height. double areaOfTrapezoid(double base1, double base2, double height) { return (base1 + base2) * height / 2; }", "score": 91}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to find the factorial of a number using tail recursion. int factorial(int n, int result = 1) { if (n == 0) return result; else return factorial(n - 1, n * result); }", "score": 97}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the sum of diagonal elements of a square matrix. int sumOfDiagonalElements(int mat[][MAX_SIZE], int size) { int sum = 0; for (int i = 0; i < size; i++) sum += mat[i][i]; return sum; }", "score": 94}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to check if a given string is a palindrome or not using recursion. bool isPalindrome(string str, int start, int end) { if (start >= end) return true; if (str[start] != str[end]) return false; return isPalindrome(str, start + 1, end - 1); }", "score": 96}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to find the sum of natural numbers using recursion. int sumOfNaturalNumbers(int n) { if (n == 0) return 0; return n + sumOfNaturalNumbers(n - 1); }", "score": 92}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the largest and smallest elements in an array. void findMinMax(int arr[], int size, int& max, int& min) { max = arr[0]; min = arr[0]; for (int i = 1; i < size; i++) { if (arr[i] > max) max = arr[i]; if (arr[i] < min) min = arr[i]; } }", "score": 90}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to calculate the perimeter of a rectangle given its length and width. double perimeterOfRectangle(double length, double width) { return 2 * (length + width); }", "score": 93}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to find the sum of elements in a linked list. int sumOfLinkedList(ListNode* head) { int sum = 0; ListNode* current = head; while (current != nullptr) { sum += current->val; current = current->next; } return sum; }", "score": 95}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to check if a given year is a leap year or not using ternary operator. bool isLeapYear(int year) { return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0); }", "score": 91}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to implement the Tower of Hanoi puzzle. void towerOfHanoi(int n, char source, char auxiliary, char destination) { if (n == 1) { cout << \"Move disk 1 from \" << source << \" to \" << destination << endl; return; } towerOfHanoi(n - 1, source, destination, auxiliary); cout << \"Move disk \" << n << \" from \" << source << \" to \" << destination << endl; towerOfHanoi(n - 1, auxiliary, source, destination); }", "score": 96}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to find the sum of a series up to n terms. int sumOfSeries(int n) { int sum = 0; for (int i = 1; i <= n; i++) sum += i; return sum; }", "score": 90}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the area of a triangle given its base and height. double areaOfTriangle(double base, double height) { return 0.5 * base * height; }", "score": 92}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Implement a program to find the sum of all elements in a linked list. int sumOfLinkedList(Node* head) { int sum = 0; Node* current = head; while (current != NULL) { sum += current->data; current = current->next; } return sum; }", "score": 88}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to find the area and perimeter of a square given its side length. void squareProperties(double side, double& area, double& perimeter) { area = side * side; perimeter = 4 * side; }", "score": 94}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Create a program to find the sum of all odd numbers up to a given number n. int sumOfOddNumbers(int n) { int sum = 0; for (int i = 1; i <= n; i += 2) sum += i; return sum; }", "score": 91}
{"text":"Grade the following C++ assignment by providing a score out of 100. Here's the assignment: Write a program to find the sum of a series up to n terms. int sumOfSeries(int n) { int sum = 0; for (int i = 1; i <= n; i++) sum += i; return sum; }", "score": 90}